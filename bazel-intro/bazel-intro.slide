Introduction to Bazel
February 7, 2022

Evgeny Khabarov
PowerFly.Consulting
Ottawa, ON, Canada

https://ekhabarov.com/talks

* Demo: gRPC microservices and Envoy.
.image img/plan.png 350 700
- build two gRPC services
- build Docker images for services ^, and Evnoy proxy
- deploy all into local k8s cluster (minikube)
.link https://github.com/ekhabarov/bazel-k8s-envoy

* Tools
- Golang
- protoc
- protoc-gen-go
- Tilt
- Docker
- Ytt

* What we're trying to solve?
- Multi-step build automation: install and build everything with one command
- Fix dependency versions: packages, binaries
- Automatically install external dependencies

* Correctness is guaranteed

* What is Bazel?
- An open-source build and tests tool
- Invented at Google, aimed to build huge *monorepo*
- Internal name Blaze
- Open-sourced in 2015

* Build
- Parallel build: Bazel uses as many cores as it found.
- Build can be run on a local or remote machine.
- Build everything from sources including dependencies.
- Re-build changed parts only.

* Limiting resources

- By default

.image img/cores.png

- Added limits

.code samples/bazelrc

* Cache
- Bazel caches all downloaded dependencies.
- Bazel caches intermediate build results.
- Cache shared between workspaces.
- Cache can be resided on a remote machine and shared between teams.

* Multi-platform & multi-language support
- Can be run on Linux, masOS, Windows
- Supports the following languages: C/C++, Java, Python, Golang, Protocol Buffers, Shell, etc.
- As well as: Docker, Kubernetes

* Hermeticity & sandboxing
Hermeticity:

- no network access
- restrict access to declared inputs only
- restrict access to ENV variables.

Sandboxing:

- Action isolation inside a restricted temporary exevcution root.
- Imroves hermeticity.

* Build graph
- The dependency graph that Bazel constructs and traverses to perform a build

.image img/graph.png 400 500

.code samples/vis

* Bazel query
Some questions that query answers:
- What packages exist beneath foo?
- What files are generated by rules in the foo package?
- What's the set of BUILD files needed to build //foo?
- What rule target(s) contain file path/to/file/bar.java as a source?
- What packages does the foo tree depend on, excluding foo/contrib?

.link https://docs.bazel.build/versions/main/query-how-to.html Bazel Query How-To

* Extendable with rules
.link https://github.com/ekhabarov/blog-code-snippets/tree/master/how-to-bazel/genereate-and-compile-go-code Hello world generator
.link https://awesomebazel.com/ Awesome Bazel

* Let's look inside

* Glossary
- *Action*: A command to run during the build, for example, a call to a compiler that takes artifacts as inputs and produces other artifacts as outputs.
- *Rule*: A function implementation that registers a series of actions.
- *Target*: A buildable unit. Can be a rule target, file target, or a package group.
- *Label*: An identifier for a target. A fully-qualified label such as _//service-one/pb:pb_

.link https://docs.bazel.build/versions/main/glossary.html#rule Full version

* Glossary (cont.)
service-one/BUILD

.code samples/BUILD /^go_library/,/^\)

- Actions: takes a _main.go_ and produces _service-one.a_
- Rule: _go_library_
- Target: a _go_library_ call
- Label: _//service-one:service-one__lib_

* Go Project structure
.code samples/tree

* WORKSPACE.bazel
- Defines a project root

.code samples/WORKSPACE /^http_archive/,/^\)
.code samples/WORKSPACE /^go_register_toolchains/
.code samples/WORKSPACE /^TILT_VERSION/,/^\)

* BUILD.bazel
- Defines a package
- Contains directives of how to build a package, what the deps are, etc.

.code samples/BUILD /io_bazel_rules_go/
.code samples/BUILD /^go_library/,/^\)
.code samples/BUILD /^go_binary/,/^\)

* BUILD.bazel (cont.)
.code samples/BUILD /io_bazel_rules_docker/
.code samples/BUILD /^container_image/,/^\)

* BUILD.bazel (cont.)
.code samples/BUILD /^container_push/,/^\)

* BUILD.bazel (cont.)
.code samples/BUILD /^genrule/,/^\)

* go_deps.bzl: list of all dependencies
called from WORKSPACE files.

.code samples/go_deps.bzl /^def/,/^\ \ \ \ \)
.code samples/go_deps_patched.bzl /^def/,/^\ \ \)

can be used by name: _@co__honnef__go__tools//:go__default__library_

* Gazelle
- Generates BUILD files
- Keeps it up to date
- Formats BUILD files
- Manages dependencies
- Works in ~95% of cases

* Pros & Cons
- Cannot use `go build` directly
- go.mod + go_deps.bzl
- Poor IDE/editors integration
- Takes a time to learn: ecosystem, rules, etc.

